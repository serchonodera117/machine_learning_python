# -*- coding: utf-8 -*-
"""image_classyfier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/119FWwwoYNt2ekbMThJP3Ij5pTO_1bMJY
"""

import tensorflow as tf
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt
import math
import numpy as np

datos, metadatos = tfds.load('fashion_mnist', as_supervised=True, with_info=True)

metadatos

datos_entrenamiento, datos_pruebas = datos['train'], datos['test']

nombres_clases = metadatos.features['label'].names

nombres_clases

#normalize data (0 to 255 to 0 - 1)
def normalizer(images, tags):
  images = tf.cast(images, tf.tofloat32)
  images /= 255 #here's the parsing drom 0-255 to 0-1
  return images, tags

  datos_entrenamiento = datos_entrenamiento.map(normalizer)
  datos_pruebas = datos_pruebas.map(normalizer)

  #add cache data (use memory of the algorithm)
  datos_entrenamiento = datos_entrenamiento.cache()
  datos_pruebas = datos_pruebas.cache()

#show an image forn test data, for the moment only the first one
for image, tags in datos_entrenamiento.take(1):
  break
  image = imagen.numpy().reshape((28,28)) #resize, tensor

#draw
plt.figure()
plt.imshow(image, cmap= plt.cm.binary)
plt.colorbar()
plt.grid(False)
plt.show()

plt.figure(figsize=(10,10))
for i, (imagen,etiqueta) in enumerate(datos_entrenamiento.take(25)):
  imagen = imagen.numpy().reshape((28,28))
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(imagen, cmap=plt.cm.binary)
  plt.xlabel(nombres_clases[etiqueta])
plt.show()

myModel = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28,28,1)), #1 -black and white flat the array
    tf.keras.layers.Dense(50, activation=tf.nn.relu),
    tf.keras.layers.Dense(50, activation=tf.nn.relu),
    tf.keras.layers.Dense(10, activation=tf.nn.softmax) #for clasigication networks
])

myModel.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(),
    metrics=['accuracy']
)

num_ej_entenamiento = metadatos.splits['train'].num_examples
num_ej_pruebas = metadatos.splits['test'].num_examples

Lote_SIZE = 32
datos_entrenamiento = datos_entrenamiento.repeat().shuffle(num_ej_entenamiento).batch(Lote_SIZE)
datos_pruebas = datos_pruebas.batch(Lote_SIZE)

#TRAINING

historial = myModel.fit(datos_entrenamiento, epochs=5, steps_per_epoch=math.ceil(num_ej_entenamiento/Lote_SIZE))

plt.xlabel("# Epoca")
plt.ylabel("Magnitud de pérdida")
plt.plot(historial.history['loss'])

#test prediction with matplotlib.pyplot library
for imagenes_prueba, etiquetas_prueba in datos_pruebas.take(1):
  imagenes_prueba = imagenes_prueba.numpy()
  etiquetas_prueba = etiquetas_prueba.numpy()
  predicciones=myModel.predict(imagenes_prueba)

def graficar_imagen(i,arr_predicciones, etiquetas_reales,imagenes):
  arr_predicciones, etiqueta_real, img = arr_predicciones[i], etiquetas_reales[i], imagenes[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])
  plt.imshow(img[...,0], cmap=plt.cm.binary)

  etiqueta_prediccion = np.argmax(arr_predicciones)
  if(etiqueta_prediccion == etiqueta_real): color= 'blue' #si acertó
  else: color='red' #si no acertó

  plt.xlabel("{} {:2.0f}% ({})".format(
      nombres_clases[etiqueta_prediccion],
      100*np.max(arr_predicciones),
      nombres_clases[etiqueta_real],
      color=color
  ))

def graficar_valor_arreglo(i, arr_predicciones, etiqueta_real):
    arr_predicciones, etiqueta_real = arr_predicciones[i], etiqueta_real[i]
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    grafica = plt.bar(range(10), arr_predicciones, color="#777777")
    plt.ylim([0,1])
    etiqueta_prediccion = np.argmax(arr_predicciones)

    grafica[etiqueta_prediccion].set_color('red')
    grafica[etiqueta_real].set_color('blue')

filas = 5
columnas = 5
num_imagenes = filas*columnas
plt.figure(figsize=(2*2*columnas, 2*filas))

for i in range(num_imagenes):
    plt.subplot(filas, 2*columnas, 2*i+1)
    graficar_imagen(i, predicciones, etiquetas_prueba, imagenes_prueba)
    plt.subplot(filas, 2*columnas, 2*i+2)
    graficar_valor_arreglo(i, predicciones, etiquetas_prueba)

#tomar cualquier indice del set  de pruebas para hacer predicciones
imagen = imagenes_prueba[5]
imagen = np.array([imagen])
prediccion = myModel.predict(imagen)
print(f"predicción {nombres_clases[np.argmax(prediccion[0])]}")